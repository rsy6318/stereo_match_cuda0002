#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <iostream>
#include <stdio.h>
#include <ctime>
#include<opencv2/opencv.hpp>
#define uint unsigned int
#define uchar unsigned char
using namespace std;
using namespace cv;
#define block_size_x 32
#define block_size_y 32

#define rows 992
#define cols 1420
#define disp_max 160

int iDivUp(int a, int b)
{
    return ((a % b) != 0) ? (a / b + 1) : (a / b);
}

__global__ void cost_kernel(uint *a[cols],uint *b[cols],uint *c[cols][disp_max])
{
	const unsigned int idx = (blockIdx.x*blockDim.x) + threadIdx.x;
	const unsigned int idy = (blockIdx.y*blockDim.y) + threadIdx.y;
	for(int d=0;d<disp_max+1;d++)
	{
		if(idy<d)
		{
			c[x][y][d]=0;
		}
		else
		{
			c[x][y][d]=abs(a[x][y]-b[x][y-d]);
		}
	}
}

int main()
{
	dim3 threads(block_size_x,block_size_y);
	dim3 blocks(iDivUp(rows,block_size_x),iDivUp(cols,block_size_y));
	uint cpu_p1[rows][cols];
	uint cpu_p2[rows][cols];
	uint (*gpu_p1)[cols];
	uint (*gpu_p2)[cols];
	uint (*gpu_cost)[cols];
	uchar (*gpu_p3)[cols];

	Mat im1,im2,im3;
	im3.create(rows,cols,CV_8UC1);
	im1=imread("im0.png");
	im2=imread("im1.png");

	for(int x=0;x<rows;x++)
	{
		for(int y=0;y<cols;y++)
		{
			cpu_p1[x][y]=im1.at<Vec3b>(x,y)[0]+(im1.at<Vec3b>(x,y)[1]<<8)+(im1.at<Vec3b>(x,y)[2]<<16);
			cpu_p2[x][y]=im2.at<Vec3b>(x,y)[0]+(im2.at<Vec3b>(x,y)[1]<<8)+(im2.at<Vec3b>(x,y)[2]<<16);
		}
	}
	cudaMalloc((void **)&gpu_p1,rows*cols*sizeof(uint));             //将gpu_a从CPU上的变量转变为GPU上的变量
	cudaMalloc((void **)&gpu_p2,rows*cols*sizeof(uint));				//将gpu_b从CPU上的变量转变为GPU上的变量
	cudaMalloc((void **)&gpu_p3,rows*cols*sizeof(uchar));				//将gpu_c从CPU上的变量转变为GPU上的变量

	cudaMemcpy(gpu_p1,cpu_p1,rows*cols*sizeof(uint),cudaMemcpyHostToDevice);         //将CPU上a的值赋给GPU上的gpu_a
	cudaMemcpy(gpu_p2,cpu_p2,rows*cols*sizeof(uint),cudaMemcpyHostToDevice);			//将CPU上b的值赋给GPU上的gpu_b



	cudaMemcpy(im3.data,gpu_p3,rows*cols*sizeof(uchar),cudaMemcpyDeviceToHost);
	for(int x=0;x<rows;x++)
	{
		for(int y=0;y<cols;y++)
		{
			//im3.at<uchar>(x,y)=p3[x][y];
		}
	}
	cudaFree(gpu_p1);
	cudaFree(gpu_p2);
	cudaFree(gpu_p3);
	imshow("   ",im3);
	waitKey(0);

	return 0;
}
