#include <opencv2/opencv.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include "cuda.h"
#include "cuda_runtime.h"
#include "cuda_runtime_api.h"
#include "device_launch_parameters.h"
#include "device_functions.h"

#include <helper_gl.h>
#include <helper_cuda.h>
#include <helper_cuda_gl.h>
#include <helper_string.h>
#include <helper_functions.h>
#include <GL/freeglut.h>
#include <vector_types.h>
#include <driver_functions.h>
#include <cuda_runtime.h>
#include <cuda_gl_interop.h>
#include <GL/glx.h>

using namespace cv;
using namespace std;

#define uchar unsigned char
#define uint unsigned int

//#define rows 992
//#define cols 1420
#define rows 288
#define cols 384
#define disp_max 160

#define block_size_x 32
#define block_size_y 32

__global__ void kernel(unsigned char *im_0[cols][3],unsigned char *im_1[cols][3],unsigned char *out1[cols][3])
{
	const uint x=blockIdx.x*blockDim.x+threadIdx.x;
	const uint y=blockIdx.y*blockDim.y+threadIdx.y;
	out1[x][y][0]=(im_0[x][y][0]+im_1[x][y][0])/2;
	out1[x][y][1]=(im_0[x][y][1]+im_1[x][y][1])/2;
	out1[x][y][2]=(im_0[x][y][2]+im_1[x][y][2])/2;
}

int iDivUp(int a, int b)
{
    return ((a % b) != 0) ? (a / b + 1) : (a / b);
}


int main()
{
	uchar h_data0[rows][cols][3];
	uchar h_data1[rows][cols][3];

	uchar *d_data0[cols][3];
	uchar *d_data1[cols][3];
	uchar *d_out[cols][3];

	Mat im0=imread("im2.ppm");
	Mat im1=imread("im6.ppm");
	Mat out;
	out.create(rows,cols,CV_8UC3);
	for(int x=0;x<rows;x++)
	{
		for(int y=0;y<cols;y++)
		{
			h_data0[x][y][0]=im0.at<Vec3b>(x,y)[0];
			h_data0[x][y][0]=im0.at<Vec3b>(x,y)[1];
			h_data0[x][y][0]=im0.at<Vec3b>(x,y)[2];
			h_data1[x][y][0]=im1.at<Vec3b>(x,y)[0];
			h_data1[x][y][0]=im1.at<Vec3b>(x,y)[1];
			h_data1[x][y][0]=im1.at<Vec3b>(x,y)[2];
		}
	}

	cudaMalloc((void **)&d_data0,3*rows*cols*sizeof(uchar));
	cudaMalloc((void **)&d_data1,3*rows*cols*sizeof(uchar));
	cudaMalloc((void **)&d_out,3*rows*cols*sizeof(uchar));

	cudaMemcpy(d_data0,h_data0,3*rows*cols*sizeof(uchar),cudaMemcpyHostToDevice);
	cudaMemcpy(d_data1,h_data1,3*rows*cols*sizeof(uchar),cudaMemcpyHostToDevice);

	kernel<<<grid_size,block_size>>>(d_data0,d_data1,d_out);
	cout<<1<<endl;

	return 0;
}
