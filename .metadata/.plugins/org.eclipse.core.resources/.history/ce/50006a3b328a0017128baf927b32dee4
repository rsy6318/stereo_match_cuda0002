#include <opencv2/opencv.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include "cuda.h"
#include "cuda_runtime.h"
#include "cuda_runtime_api.h"
#include "device_launch_parameters.h"
#include "device_functions.h"

#include <helper_gl.h>
#include <helper_cuda.h>
#include <helper_cuda_gl.h>
#include <helper_string.h>
#include <helper_functions.h>
#include <GL/freeglut.h>
#include <vector_types.h>
#include <driver_functions.h>
#include <cuda_runtime.h>
#include <cuda_gl_interop.h>
#include <GL/glx.h>

using namespace cv;
using namespace std;

#define uchar unsigned char
#define uint unsigned int

//#define rows 992
//#define cols 1420
#define rows 288
#define cols 384
#define disp_max 160

#define block_size_x 32
#define block_size_y 32

__global__ void kernel(unsigned char *im_0[cols],unsigned char *im_1[cols],unsigned char *out1[cols])
{
	const uint x=blockIdx.x*blockDim.x+threadIdx.x;
	const uint y=blockIdx.y*blockDim.y+threadIdx.y;
	out1[x][y]=(unsigned char)(im_0[x][y]+im_1[x][y])/2;
}

int iDivUp(int a, int b)
{
    return ((a % b) != 0) ? (a / b + 1) : (a / b);
}


int main()
{
	Mat im0=imread("im2.ppm",0);
	Mat im1=imread("im6.ppm",0);

	uchar h_data0[rows][cols];
	uchar h_data1[rows][cols];

	for(int x=0;x<rows;x++)
	{
		for(int y=0;y<cols;y++)
		{
			h_data0[x][y]=im0.at<uchar>(x,y);
			h_data1[x][y]=im1.at<uchar>(x,y);
		}
	}

	Mat out;
	out.create(rows,cols,CV_8UC1);
	//bgr
	unsigned char *d_data0[cols];
	unsigned char *d_data1[cols];

	unsigned char *d_out[cols];

	cudaMalloc((void **)&d_data0,rows*cols*sizeof(unsigned char));
	cudaMalloc((void **)&d_data1,rows*cols*sizeof(unsigned char));
	cudaMalloc((void **)&d_out,rows*cols*sizeof(unsigned char));

	cudaMemcpy(d_data0,h_data0,rows*cols*sizeof(unsigned char),cudaMemcpyHostToDevice);
	cudaMemcpy(d_data1,h_data1,rows*cols*sizeof(unsigned char),cudaMemcpyHostToDevice);

	dim3 block_size(block_size_x,block_size_y);
	dim3 grid_size(iDivUp(rows,block_size_x),iDivUp(cols,block_size_y));

	kernel<<<grid_size,block_size>>>(d_data0,d_data1,d_out);

	cudaMemcpy(out.data,d_out,rows*cols*sizeof(unsigned char),cudaMemcpyDeviceToHost);

	imshow("1111",out);
	waitKey(0);

	return 0;
}
